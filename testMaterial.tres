[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform sampler2D image: hint_black_albedo;
uniform float edge_threshold: hint_range(0.0, 1.0) = 0.5;
uniform vec4 clear_color : hint_color = vec4(0.0, 0.0, 0.0, 0.0); // Add a uniform for the clear color

void fragment() {
    vec2 uv = UV;
    vec2 texSize = vec2(textureSize(TEXTURE, 0));
    vec2 texel = 1.0 / texSize;

    float sobel_x[9] = float[](-1.0, 0.0, 1.0, -2.0, 0.0, 2.0, -1.0, 0.0, 1.0);
    float sobel_y[9] = float[](-1.0, -2.0, -1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0);

    float edge_x = 0.0;
    float edge_y = 0.0;

    int index = 0;
    for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
            vec2 offset = vec2(float(i), float(j)) * texel;
            vec4 tex_color = texture(TEXTURE, uv + offset);
            if (tex_color.a > 0.0) { // Check if the alpha value is greater than 0.0
                float intensity = tex_color.r;
                edge_x += sobel_x[index] * intensity;
                edge_y += sobel_y[index] * intensity;
            }
            index++;
        }
    }

    float edge_strength = length(vec2(edge_x, edge_y));

    if (edge_strength > edge_threshold) {
        COLOR = vec4(1.0);
    } else {
//		COLOR = vec4(0.0, 0.0, 1.0, 0.5)
        COLOR = clear_color; // Set the background color to the clear color
    }
}
"

[resource]
shader = SubResource( 1 )
shader_param/edge_threshold = 0.5
shader_param/clear_color = Color( 0, 0, 0, 0 )
